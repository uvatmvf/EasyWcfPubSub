//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System.ServiceModel;

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName = "IPubSubService", CallbackContract = typeof(IPubSubServiceCallback), SessionMode = System.ServiceModel.SessionMode.Required)]
public interface IPubSubService
{

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPubSubService/Subscribe", ReplyAction = "http://tempuri.org/IPubSubService/SubscribeResponse")]
    void Subscribe(string[] channels);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPubSubService/Subscribe", ReplyAction = "http://tempuri.org/IPubSubService/SubscribeResponse")]
    System.Threading.Tasks.Task SubscribeAsync(string[] channels);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPubSubService/Unsubscribe", ReplyAction = "http://tempuri.org/IPubSubService/UnsubscribeResponse")]
    void Unsubscribe();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPubSubService/Unsubscribe", ReplyAction = "http://tempuri.org/IPubSubService/UnsubscribeResponse")]
    System.Threading.Tasks.Task UnsubscribeAsync();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPubSubService/Publish", ReplyAction = "http://tempuri.org/IPubSubService/PublishResponse")]
    void Publish(string channel, string publish);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPubSubService/Publish", ReplyAction = "http://tempuri.org/IPubSubService/PublishResponse")]
    System.Threading.Tasks.Task PublishAsync(string channel, string publish);

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPubSubService/Ping", ReplyAction = "http://tempuri.org/IPubSubService/PingResponse")]
    void Ping();

    [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IPubSubService/Ping", ReplyAction = "http://tempuri.org/IPubSubService/PingResponse")]
    System.Threading.Tasks.Task PingAsync();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IPubSubServiceCallback
{
    [System.ServiceModel.OperationContractAttribute(IsOneWay = true, Action = "http://tempuri.org/IPubSubService/OnPublished")]
    void OnPublished(string channel, string publish);
    
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IPubSubServiceChannel : IPubSubService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class PubSubServiceClient : System.ServiceModel.DuplexClientBase<IPubSubService>, IPubSubService
{

    public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance) :
            base(callbackInstance)
    {
    }

    public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) :
            base(callbackInstance, endpointConfigurationName)
    {
    }

    public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) :
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }

    public PubSubServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(callbackInstance, binding, remoteAddress)
    {
    }

    public void Subscribe(string[] channels)
    {
        base.Channel.Subscribe(channels);
    }

    public System.Threading.Tasks.Task SubscribeAsync(string[] channels)
    {
        return base.Channel.SubscribeAsync(channels);
    }

    public void Unsubscribe()
    {
        base.Channel.Unsubscribe();
    }

    public System.Threading.Tasks.Task UnsubscribeAsync()
    {
        return base.Channel.UnsubscribeAsync();
    }

    public void Publish(string channel, string publish)
    {
        base.Channel.Publish(channel, publish);
    }

    public System.Threading.Tasks.Task PublishAsync(string channel, string publish)
    {
        return base.Channel.PublishAsync(channel, publish);
    }

    public void Ping()
    {
        base.Channel.Ping();
    }

    public System.Threading.Tasks.Task PingAsync()
    {
        return base.Channel.PingAsync();
    }
}
